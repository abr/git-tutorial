#!/bin/bash

# Based off https://github.com/jakub-g/git-resolve-conflict
# Licence reproduced below
# My modifications:
# - extended to multiple files

### The MIT License (MIT)

# Copyright (c) 2016 Jakub Gieryluk

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

STRATEGY="$1"
FILE_PATHS=("${@:2}")  # all subsequent args, as an array

if [ "$1" == "--version" ]; then
  DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
  cat $DIR/../package.json | grep version | sed 's/,//'
  exit 0
fi

if [ -z "$FILE_PATHS" ] || [ -z "$STRATEGY" ]; then
  echo "Usage:   git-resolve-conflict <strategy> <file>"
  echo "When rebasing, ours == HEAD (top), theirs == new commit (bottom)"
  echo ""
  echo "Example: git-resolve-conflict --ours package.json"
  echo "Example: git-resolve-conflict --union package.json"
  echo "Example: git-resolve-conflict --theirs package.json"
  exit 0
fi

for FILE_PATH in "${FILE_PATHS[@]}"; do

  if [ ! -f "$FILE_PATH" ]; then
    echo "$FILE_PATH does not exist; skipping."
    continue
  fi

  # remove leading ./ if present, to match the output of git diff --name-only
  # (otherwise if user input is './filename.txt' we would not match 'filename.txt')
  FILE_PATH_FOR_GREP=${FILE_PATH#./}
  # grep -Fxq: match string (F), exact (x), quiet (exit with code 0/1) (q)
  if ! git diff --name-only --diff-filter=U | grep -Fxq "$FILE_PATH_FOR_GREP"; then
    echo "$FILE_PATH is not in conflicted state; skipping."
    continue
  fi

  echo "Merging $FILE_PATH"

  git show :1:"$FILE_PATH" > ./tmp.common
  git show :2:"$FILE_PATH" > ./tmp.ours
  git show :3:"$FILE_PATH" > ./tmp.theirs

  git merge-file "$STRATEGY" -p ./tmp.ours ./tmp.common ./tmp.theirs > "$FILE_PATH"
  git add "$FILE_PATH"

  rm ./tmp.common
  rm ./tmp.ours
  rm ./tmp.theirs

done
